time <- d1[1:7,1]
time
d1 <- as.matrix(read.csv(file="C:/Users/ron.handels/surfdrive/PhD/Projects/IPECAD/Model repository/donanemab/Sims (2023) plot extraction/2c.csv", sep=";", dec=",", header=FALSE))
d1
time <- 1:7
time
time <- seq(from=0, to=72, by=12)
time
soc <- c(0, 0.2, 0.34, 0.46, 0.75, 0.94, 1.2)
soc
soc
soc_ipolate <- approx(x=time, y=soc, n=length(time)*10)
soc_ipolate
soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10)
soc_ipolate
(length(time)-1)
(length(time)-1)*10
soc_ipolate <- approx(x=time, y=soc, n=61*10)
soc_ipolate <- approx(x=time, y=soc, n=61*10); soc_ipolate
soc_ipolate <- approx(x=time, y=soc, n=61); soc_ipolate
soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1); soc_ipolate
soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)
int_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)
int_ipolate
soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*5+1)
soc_ipolate
soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*11+1)
soc_ipolate
plot(x=time, y=soc, col="grey")
points(x=time, y=int, col="green")
int
int <- c(0, 0.2, 0.34, 0.46, 0.75, 0.94, 1.2)
soc <- c(0, 0.3, 0.65, 0.95, 1.3, 1.5, 1.9)
time <- seq(from=0, to=72, by=12)
int <- c(0, -0.2, -0.34, -0.46, -0.75, -0.94, -1.2)
soc <- c(0, -0.3, -0.65, -0.95, -1.3, -1.5, -1.9)
soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)
int_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)
plot(x=time, y=soc, col="grey")
points(x=time, y=int, col="green")
time_ipolate <- approx(x=time, n=(length(time)-1)*10+1)
time_ipolate
points(x=time_ipolate, y=soc_ipolate, type="l", col="grey")
time_ipolate
soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)[["y"]]
soc_ipolate
temp_soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)
temp_int_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)
temp_soc_ipolate[["x"]]==temp_int_ipolate[["x"]]
time_i <- temp_soc_ipolate[["x"]]
soc_i <- temp_soc_ipolate[["y"]]
int_i <- temp_int_ipolate[["y"]]
plot(x=time, y=soc, col="grey")
points(x=time, y=int, col="green")
points(x=time_ipolate, y=soc_ipolate, type="l", col="grey")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=int_i, type="l", col="green")
plot(x=time, y=soc, col="grey")
points(x=time, y=int, col="green")
points(x=time_i, y=soc_i, type="l", col="grey")
temp_soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)
temp_int_ipolate <- approx(x=time, y=int, n=(length(time)-1)*10+1)
temp_soc_ipolate[["x"]]==temp_int_ipolate[["x"]]
time_i <- temp_soc_ipolate[["x"]]
soc_i <- temp_soc_ipolate[["y"]]
int_i <- temp_int_ipolate[["y"]]
plot(x=time, y=soc, col="grey")
points(x=time, y=int, col="green")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=int_i, type="l", col="green")
f.closest <- function(vector,target) which.min(abs(vector - target))
int[7]
which.min(abs(soc_i - int[7]))
time_i[which.min(abs(soc_i - int[7]))]
f.closest <- function(vector,target) which.min(abs(vector - target))
sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
time_socint <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
arrows(x0=time_socint, y0=int, x1=time_i, y1=int)
time_socint
int
time_i
arrows(x0=time_socint, y0=int, x1=time, y1=int)
plot(x=time, y=soc, col="grey")
points(x=time, y=int, col="green")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=int_i, type="l", col="green")
time_socint <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
arrows(x0=time_socint, y0=int, x1=time, y1=int)
soc_i
int[7]
time_i[which.min(abs(soc_i - int[7]))]
time_socint <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
time_socint
arrows(x0=time_i[time_socint], y0=int, x1=time, y1=int)
time_i
time_i
time_i[time_socint]
arrows(x0=time_i[time_socint], y0=int, x1=time_i[time_socint], y1=int)
arrows(x0=time_i[time_socint], y0=int, x1=time, y1=int)
plot(x=time, y=soc, col="grey")
points(x=time, y=int, col="green")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=int_i, type="l", col="green")
time_socint <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
arrows(x0=time_i[time_socint], y0=int, x1=time, y1=int)
closest_element <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
closest_element <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
closest_time <- time_i[closest_element]
closest_time
closest_element <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
time_socatint <- time_i[closest_element]
arrows(x0=time_socatint, y0=int, x1=time, y1=int)
closest_element <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
time_socatint <- time_i[closest_element]
plot(x=time, y=soc, col="grey")
points(x=time, y=int, col="green")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=int_i, type="l", col="green")
arrows(x0=time_socatint, y0=int, x1=time, y1=int)
time_socatint
time_socatint
time_int - time_socatint
time - time_socatint
delay_relative <- (time - time_socatint) / time
delay_relative
delay_relative <- (time - time_socatint) / time_socatint
delay_relative
Tx_time_abs <- time - time_socatint
Tx_time_rel <- Tx_time_abs / time
Tx_time_abs
Tx_time_rel
Tx_scale_abs <- int - soc
Tx_scale_abs
Tx_scale_rel <- Tx_scale_abs / soc
Tx_scale_rel
Tx_scale_abs
Tx_scale_abs <- soc - int
Tx_scale_abs
Tx_scale_rel <- Tx_scale_abs / soc
Tx_scale_rel
plot(x=time, y=soc, col="grey", ylim=c(0,-3))
points(x=time, y=int, col="green")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=int_i, type="l", col="green")
plot(x=time, y=soc, col="grey", ylim=c(-3,0))
points(x=time, y=int, col="green")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=int_i, type="l", col="green")
Tx_time_rel
Tx_scale_rel
Tx_scale_abs
Tx_time_abs
mean(Tx_time_abs)
27/7
Tx_time_abs
27/4
# beginning of code
rm(list=ls())
cat("\014")
time <- seq(from=0, to=72, by=12)
int <- c(0, -0.2, -0.34, -0.46, -0.75, -0.94, -1.2)
soc <- c(0, -0.3, -0.65, -0.95, -1.3, -1.5, -1.9)
f.closest <- function(vector,target) which.min(abs(vector - target))
f.closest <- function(vector,target) which.min(abs(vector - target))
f.time_delay <- function(time, soc, int, plot) {
temp_soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)
temp_int_ipolate <- approx(x=time, y=int, n=(length(time)-1)*10+1)
temp_soc_ipolate[["x"]]==temp_int_ipolate[["x"]]
time_i <- temp_soc_ipolate[["x"]]
soc_i <- temp_soc_ipolate[["y"]]
int_i <- temp_int_ipolate[["y"]]
closest_element <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
time_socatint <- time_i[closest_element]
if(plot) {
plot(x=time, y=soc, col="grey", ylim=c(-3,0))
points(x=time, y=int, col="green")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=int_i, type="l", col="green")
arrows(x0=time_socatint, y0=int, x1=time, y1=int)
}
Tx_time_abs <- time - time_socatint
Tx_time_rel <- Tx_time_abs / time
Tx_scale_abs <- soc - int
Tx_scale_rel <- Tx_scale_abs / soc
return(list(
Tx_time_abs=Tx_time_abs,
Tx_time_rel=Tx_time_rel,
Tx_scale_abs=Tx_scale_abs,
Tx_scale_rel=Tx_scale_rel
))
}
f.time_delay(time=time, soc=soc, int=int, plot=TRUE)
time_delay <- f.time_delay(time=time, soc=soc, int=int, plot=TRUE)
time_delay <- f.time_delay(time=time, soc=soc, int=int, plot=TRUE)
time_delay <- f.time_delay(time=time, soc=soc, int=int, plot=TRUE)
time_delay[["Tx_time_abs"]]
time_delay[["Tx_time_abs"]]
f.time_delay <- function(time, soc, int, plot) {
temp_soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)
temp_int_ipolate <- approx(x=time, y=int, n=(length(time)-1)*10+1)
temp_soc_ipolate[["x"]]==temp_int_ipolate[["x"]]
time_i <- temp_soc_ipolate[["x"]]
soc_i <- temp_soc_ipolate[["y"]]
int_i <- temp_int_ipolate[["y"]]
closest_element <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
time_socatint <- time_i[closest_element]
if(plot) {
plot(x=time, y=soc, col="grey", ylim=c(-3,0))
points(x=time, y=int, col="green")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=int_i, type="l", col="green")
arrows(x0=time_socatint[-1], y0=int[-1], x1=time[-1], y1=int[-1])
}
Tx_time_abs <- time - time_socatint
Tx_time_rel <- Tx_time_abs / time
Tx_scale_abs <- soc - int
Tx_scale_rel <- Tx_scale_abs / soc
return(list(
Tx_time_abs=Tx_time_abs,
Tx_time_rel=Tx_time_rel,
Tx_scale_abs=Tx_scale_abs,
Tx_scale_rel=Tx_scale_rel
))
}
time_delay <- f.time_delay(time=time, soc=soc, int=int, plot=TRUE)
time_delay[["Tx_time_abs"]]
27.6/4
27.6/4 # absolute time delay at last observation in weeks converted to months
time_delay[["Tx_time_rel"]]
source("C:/Users/ron.handels/surfdrive/PhD/Projects/IPECAD/Model repository/donanemab/model testing.R")
# calibration
f.calibrate <- function(x, l.inputs, parameter) {
l.inputs[[parameter]] <- x
out <- f.run_scenario(l.inputs=l.inputs, detailed=FALSE)
iNHB <- out[2,"NHB"] - out[1,"NHB"]
return(iNHB)
}
out <- f.run_scenario(l.inputs=l.inputs, detailed=FALSE)
out
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
out
t_mci <- out[["l.out_strategy"]][["m.trace"]][c(1:2),c("mcion","mciof")]
t_mci
out[["l.out_strategy"]][["m.trace"]]
out[["l.out_strategy"]]
out[["l.out_strategy"]][["int"]]
t_mci <- out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:2),c("mcion","mciof")]
t_mci
t_mci <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:2),c("mcion","mciof")])
t_mci
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:2),c("mcion","mciof")])
t_mci_con <- sum(out[["l.out_strategy"]][["con"]][["m.trace"]][c(1:2),c("mcion","mciof")])
t_mci_int
t_mci_con
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:2),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:2),c("mcion","mciof")])
t_mci_int
t_mci_soc
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:4),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:4),c("mcion","mciof")])
t_mci_int - t_mci_soc
(t_mci_int - t_mci_soc) / t_mci_int
rm(list=ls())
cat("\014")
# low/medium tau population
time <- seq(from=0, to=72, by=12)
int <- c(0, -0.2, -0.34, -0.46, -0.75, -0.94, -1.2)
soc <- c(0, -0.3, -0.65, -0.95, -1.3, -1.5, -1.9)
f.closest <- function(vector,target) which.min(abs(vector - target))
f.time_delay <- function(time, soc, int, plot) {
temp_soc_ipolate <- approx(x=time, y=soc, n=(length(time)-1)*10+1)
temp_int_ipolate <- approx(x=time, y=int, n=(length(time)-1)*10+1)
temp_soc_ipolate[["x"]]==temp_int_ipolate[["x"]]
time_i <- temp_soc_ipolate[["x"]]
soc_i <- temp_soc_ipolate[["y"]]
int_i <- temp_int_ipolate[["y"]]
closest_element <- sapply(X=int, FUN=function(x) f.closest(vector=soc_i, target=x))
time_socatint <- time_i[closest_element]
if(plot) {
plot(x=time, y=soc, col="grey", ylim=c(-3,0))
points(x=time, y=int, col="green")
points(x=time_i, y=soc_i, type="l", col="grey")
points(x=time_i, y=int_i, type="l", col="green")
arrows(x0=time_socatint[-1], y0=int[-1], x1=time[-1], y1=int[-1])
}
Tx_time_abs <- time - time_socatint
Tx_time_rel <- Tx_time_abs / time
Tx_scale_abs <- soc - int
Tx_scale_rel <- Tx_scale_abs / soc
return(list(
Tx_time_abs=Tx_time_abs,
Tx_time_rel=Tx_time_rel,
Tx_scale_abs=Tx_scale_abs,
Tx_scale_rel=Tx_scale_rel
))
}
time_delay <- f.time_delay(time=time, soc=soc, int=int, plot=TRUE)
time_delay[["Tx_time_abs"]]
27.6/4 # absolute time delay at last observation in weeks converted to months, comes close to [Sims, 2023: suppl 3 eTable 6]
time_delay[["Tx_time_rel"]]
0.38 # relative time saving, comes close to [Sims, 2023: suppl 3 eTable 6]
source("C:/Users/ron.handels/surfdrive/PhD/Projects/IPECAD/Model repository/donanemab/model testing.R")
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:4),c("mcion","mciof")])
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:4),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:4),c("mcion","mciof")])
cal <- abs( ((t_mci_int - t_mci_soc) / t_mci_int) - 0.38 )
t_mci_int
t_mci_soc
cal <- abs( ((t_mci_int - t_mci_soc) / t_mci_int) - 0.38 )
cal
# calibration
f.calibrate <- function(x, l.inputs, parameter) {
l.inputs[[parameter]] <- x
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:4),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:4),c("mcion","mciof")])
cal <- abs( ((t_mci_int - t_mci_soc) / t_mci_int) - 0.38 )
return(cal)
}
calibrate <- optimize(f=function(x) abs(f.headroom(x, l.inputs=l.inputs_UK, parameter="rr.tx_mci_mil")), interval=c(0.01,0.99))[["minimum"]]
calibrate <- optimize(f=function(x) abs(f.calibrate(x, l.inputs=l.inputs_UK, parameter="rr.tx_mci_mil")), interval=c(0.01,0.99))[["minimum"]]
calibrate <- optimize(f=function(x) abs(f.calibrate(x, l.inputs=l.inputs, parameter="rr.tx_mci_mil")), interval=c(0.01,0.99))[["minimum"]]
calibrate
l.inputs[["rr.tx_mci_mil"]] <- 0.5
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:4),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:4),c("mcion","mciof")])
cal <- abs( ((t_mci_int - t_mci_soc) / t_mci_int) - 0.38 )
cal
l.inputs[["rr.tx_mci_mil"]] <- 0.2
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:4),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:4),c("mcion","mciof")])
cal <- abs( ((t_mci_int - t_mci_soc) / t_mci_int) - 0.38 )
cal
t_mci_int
t_mci_soc
l.inputs[["rr.tx_mci_mil"]] <- 0.2
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:4),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:4),c("mcion","mciof")])
cal <- abs( ((t_mci_int - t_mci_soc) / t_mci_int) - 0.38 )
cal
t_mci_int
t_mci_soc
((t_mci_int - t_mci_soc) / t_mci_int)
l.inputs[["rr.tx_mci_mil"]] <- 0.8
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:4),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:4),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
t_dif_rel
l.inputs[["rr.tx_mci_mil"]] <- 0.8
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
cal <- abs(t_dif_rel- 0.38)
t_dif_rel
l.inputs[["rr.tx_mci_mil"]] <- 0.5
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
t_dif_rel
t_mci_int
t_mci_soc
cal <- abs(t_dif_rel - 0.38)
cal
l.inputs[["rr.tx_mci_mil"]] <- 0.2
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
cal <- abs(t_dif_rel - 0.38)
cal
l.inputs[["rr.tx_mci_mil"]] <- 0.4
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
cal <- abs(t_dif_rel - 0.38)
cal
l.inputs[["rr.tx_mci_mil"]] <- 0.6
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
cal <- abs(t_dif_rel - 0.38)
cal
t_dif_rel
l.inputs[["rr.tx_mci_mil"]] <- 0.1
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:3),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
t_dif_rel
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][3,c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][3,c("mcion","mciof")])
t_mci_int; t_mci_soc
l.inputs[["rr.tx_mci_mil"]] <- 0.1
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][3,c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][3,c("mcion","mciof")])
t_mci_int; t_mci_soc
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][2,c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][2,c("mcion","mciof")])
t_mci_int; t_mci_soc
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][2,c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][2,c("mcion","mciof")])
t_mci_int; t_mci_soc
1-t_mci_int; 1-t_mci_soc
1-t_mci_soc; 1-t_mci_int
l.inputs[["rr.tx_mci_mil"]] <- 0.7
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][2,c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][2,c("mcion","mciof")])
1-t_mci_soc; 1-t_mci_int
424/459
20/30
(1-t_mci_int) / (1-t_mci_soc)
l.inputs[["rr.tx_mci_mil"]] <- 0.6
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][2,c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][2,c("mcion","mciof")])
1-t_mci_soc; 1-t_mci_int
20/30
(1-t_mci_int) / (1-t_mci_soc)
# calibration
f.calibrate <- function(x, l.inputs, parameter) {
l.inputs[[parameter]] <- x
l.inputs[["rr.tx_mci_mil"]] <- 0.1
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:5),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:5),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
t_dif_rel
cal <- abs(t_dif_rel - 0.38)
cal
return(cal)
}
calibrate <- optimize(f=function(x) abs(f.calibrate(x, l.inputs=l.inputs, parameter="rr.tx_mci_mil")), interval=c(0.01,0.99))[["minimum"]]
# calibration
f.calibrate <- function(x, l.inputs, parameter) {
l.inputs[["rr.tx_mci_mil"]] <- 0.1
l.inputs[[parameter]] <- x
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:5),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:5),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
t_dif_rel
cal <- abs(t_dif_rel - 0.38)
cal
return(cal)
}
calibrate <- optimize(f=function(x) abs(f.calibrate(x, l.inputs=l.inputs, parameter="rr.tx_mci_mil")), interval=c(0.01,0.99))[["minimum"]]
calibrate
0.7/4.5
l.inputs[["rr.tx_mci_mil"]] <- 0.1
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:10),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:10),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
t_dif_rel
cal <- abs(t_dif_rel - 0.38)
cal
l.inputs[["rr.tx_mci_mil"]] <- 0.3
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:10),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:10),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
t_dif_rel
cal <- abs(t_dif_rel - 0.38)
cal
calibrate <- optimize(f=function(x) abs(f.calibrate(x, l.inputs=l.inputs, parameter="rr.tx_mci_mil")), interval=c(0.01,0.99))[["minimum"]]
calibrate
l.inputs[["rr.tx_mci_mil"]] <- 0.1
l.inputs[[parameter]] <- x
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:10),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:10),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
t_dif_rel
cal <- abs(t_dif_rel - 0.38)
cal
l.inputs[["rr.tx_mci_mil"]] <- 0.2
l.inputs[[parameter]] <- x
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:10),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:10),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
t_dif_rel
cal <- abs(t_dif_rel - 0.38)
cal
# calibration
f.calibrate <- function(x, l.inputs, parameter) {
#l.inputs[["rr.tx_mci_mil"]] <- 0.2
l.inputs[[parameter]] <- x
out <- f.run_scenario(l.inputs=l.inputs, detailed=TRUE)
t_mci_int <- sum(out[["l.out_strategy"]][["int"]][["m.trace"]][c(1:10),c("mcion","mciof")])
t_mci_soc <- sum(out[["l.out_strategy"]][["soc"]][["m.trace"]][c(1:10),c("mcion","mciof")])
t_dif_rel <- (t_mci_int - t_mci_soc) / t_mci_int
t_dif_rel
cal <- abs(t_dif_rel - 0.38)
cal
return(cal)
}
calibrate <- optimize(f=function(x) abs(f.calibrate(x, l.inputs=l.inputs, parameter="rr.tx_mci_mil")), interval=c(0.01,0.99))[["minimum"]]
calibrate
